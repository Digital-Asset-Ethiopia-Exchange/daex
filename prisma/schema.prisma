datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(uuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  Int       @id @default(autoincrement())
  uid                 String    @unique @default(uuid())
  tatumAccountId      String?   @unique
  referralId          String    @unique
  roles               Role[]
  name                String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  email               String    @unique
  emailVerified       DateTime?
  phoneNumber         String?
  phoneNumberVerified DateTime?
  hashedPassword      String
  referredBy          User?     @relation("UserToUser", fields: [referredById], references: [referralId], onDelete: SetNull)
  accounts            Account[]
  sessions            Session[]
  country             String
  referredById        String?
  User                User[]    @relation("UserToUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
